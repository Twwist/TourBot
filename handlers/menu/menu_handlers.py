from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import and_

from db_handlers.create_db import session
from db_handlers.models import Request
from handlers.registrations.check import is_bus_registered, is_user_registered
from handlers.registrations.signup_bus import bus_registration
from handlers.registrations.signup_user import user_password_waiting

menu_router = Router()


@menu_router.message(lambda message: message.text == "–ú–æ–π –∞–≤—Ç–æ–±—É—Å—ã")
async def my_buse(message: types.Message, state: FSMContext):
    if is_user_registered(message):
        bus = is_bus_registered(message)
        if bus:
            await message.answer("<b>–í–∞—à –∞–≤—Ç–æ–±—É—Å:</b>\n"
                                 f"üîπ –ù–æ–º–µ—Ä: {bus.number}\n"
                                 f"üîπ –ú–∞—Ä–∫–∞: {bus.brand}\n"
                                 f"üîπ –ú–µ—Å—Ç: {bus.seat_count}\n"
                                 f"üîπ –ö–æ–º—Ñ–æ—Ä—Ç: {bus.comfort_level}\n"
                                 f"üîπ –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: {'–ï—Å—Ç—å' if bus.has_air_conditioning else '–ù–µ—Ç'}")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await bus_registration(message, state)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await user_password_waiting(message, state)


@menu_router.message(lambda message: message.text == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def offers(message: types.Message, state: FSMContext):
    if is_user_registered(message):
        bus = is_bus_registered(message)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã
        if bus:
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–∫–∞–∑—ã
            matching_requests = session.query(Request).filter(
                and_(
                    Request.seat_count == bus.seat_count,
                    Request.comfort_level == bus.comfort_level,
                    Request.requires_air_conditioning == bus.has_air_conditioning,
                    ~Request.date_range.in_([schedule.date_range for schedule in bus.schedules])
                )
            ).all()
            print(matching_requests)
            # print(Request.date_range)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if matching_requests:
                response_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∑–∞–∫–∞–∑—ã:\n\n"
                for request in matching_requests:
                    response_text += (
                        f"üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç: {request.route}\n"
                        f"üìÖ –î–∞—Ç—ã: {request.date_range}\n"
                        f"üí∫ –£—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞: {request.comfort_level}\n"
                        f"‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: {'–î–∞' if request.requires_air_conditioning else '–ù–µ—Ç'}\n\n"
                    )
                await message.answer(response_text)
            else:
                await message.answer("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞.")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await bus_registration(message, state)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await user_password_waiting(message, state)


@menu_router.message(lambda message: message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def current_session(message: types.Message, state: FSMContext):
    if is_user_registered(message):
        if is_bus_registered(message):
            await message.answer("–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await bus_registration(message, state)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await user_password_waiting(message, state)

