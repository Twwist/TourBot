from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import and_

from db_handlers.create_db import session
from db_handlers.models import Request, Response, Bus, User, Schedule
from handlers.registrations.check import is_bus_registered, is_user_registered
from handlers.registrations.signup_bus import bus_registration
from handlers.registrations.signup_user import user_password_waiting
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message

menu_router = Router()


class ResponseAnswer(StatesGroup):
    waiting_for_price = State()


@menu_router.message(lambda message: message.text == "üöå–ú–æ–π –∞–≤—Ç–æ–±—É—Å")
async def my_buses(message: types.Message, state: FSMContext):
    if is_user_registered(message):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã
        bus = is_bus_registered(message)
        if bus:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–≤—Ç–æ–±—É—Å–µ
            await message.answer("<b>–í–∞—à –∞–≤—Ç–æ–±—É—Å:</b>\n"
                                 f"<b>–ù–æ–º–µ—Ä</b>: {bus.number}\n"
                                 f"<b>–ú–∞—Ä–∫–∞</b>: {bus.brand}\n"
                                 f"<b>–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä</b>: {'–ï—Å—Ç—å' if bus.condition else '–ù–µ—Ç'}\n"
                                 f"<b>–ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–∏–¥–∞</b>: {'–ï—Å—Ç—å' if bus.microphone_for_guide else '–ù–µ—Ç'}\n"
                                 f"<b>–ú–æ–Ω–∏—Ç–æ—Ä/–¢–í</b>: {'–ï—Å—Ç—å' if bus.monitor else '–ù–µ—Ç'}\n"
                                 f"<b>–û—Ç–∫–∏–¥–Ω—ã–µ –∫—Ä–µ—Å–ª–∞</b>: {'–ï—Å—Ç—å' if bus.arm_chairs else '–ù–µ—Ç'}\n"
                                 f"<b>–¢–∏–ø</b>: {bus.type_bus}")
        else:
            await message.answer("‚ùå–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await bus_registration(message, state)
    else:
        await message.answer("‚ùå–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await user_password_waiting(message, state)


@menu_router.message(lambda message: message.text == "üìã–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def offers(message: types.Message, state: FSMContext):
    if is_user_registered(message):
        bus = is_bus_registered(message)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã
        if bus:
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–∫–∞–∑—ã
            matching_requests = session.query(Request).filter(
                and_(
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ–±—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                    (Request.minivan == (bus.type_bus == "–ú–∏–Ω–∏–≤–µ–Ω—ã (5-9 –º–µ—Å—Ç)")) |
                    (Request.microbus == (bus.type_bus == "–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã (10-20 –º–µ—Å—Ç)")) |
                    (Request.small_bus == (bus.type_bus == "–ú–∞–ª—ã–µ –∞–≤—Ç–æ–±—É—Å—ã (21-30 –º–µ—Å—Ç)")) |
                    (Request.medium_bus == (bus.type_bus == "–°—Ä–µ–¥–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (31-45 –º–µ—Å—Ç)")) |
                    (Request.big_bus == (bus.type_bus == "–ë–æ–ª—å—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (46-60 –º–µ—Å—Ç)")) |
                    (Request.large_bus == (bus.type_bus == "–û—Å–æ–±–æ –±–æ–ª—å—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (61-90 –º–µ—Å—Ç)")),

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏
                    ~Request.date_range.in_([schedule.date_range for schedule in bus.schedules]),

                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é —É–¥–æ–±—Å—Ç–≤
                    bus.condition or Request.condition == bus.condition,
                    bus.microphone_for_guide or Request.microphone_for_guide == bus.microphone_for_guide,
                    bus.monitor or Request.monitor == bus.monitor,
                    bus.arm_chairs or Request.arm_chairs == bus.arm_chairs
                )
            ).all()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if matching_requests:
                response_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∑–∞–∫–∞–∑—ã:\n\n"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[], row_width=1)

                for idx, request in enumerate(matching_requests, start=1):
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
                    response_text += (
                        f"<b>–ú–∞—Ä—à—Ä—É—Ç</b>: {request.route}\n"
                        f"<b>–î–∞—Ç—ã</b>: {request.date_range}\n"
                        f"<b>–£—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞</b>: {'–í—ã—Å–æ–∫–∏–π' if request.condition else '–ù–∏–∑–∫–∏–π'}\n"
                        f"<b>–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä</b>: {'–ï—Å—Ç—å' if request.condition else '–ù–µ—Ç'}\n"
                        f"<b>–ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–∏–¥–∞</b>: {'–ï—Å—Ç—å' if request.microphone_for_guide else '–ù–µ—Ç'}\n"
                        f"<b>–ú–æ–Ω–∏—Ç–æ—Ä / –¢–í</b>: {'–ï—Å—Ç—å' if request.monitor else '–ù–µ—Ç'}\n"
                        f"<b>–û—Ç–∫–∏–¥–Ω—ã–µ –∫—Ä–µ—Å–ª–∞</b>: {'–ï—Å—Ç—å' if request.arm_chairs else '–ù–µ—Ç'}\n\n"
                    )

                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
                    button = InlineKeyboardButton(
                        text=f"‚òëÔ∏è–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ {idx} –∑–∞–∫–∞–∑",
                        callback_data=f"apply_for_request_{idx}_{request.request_id}"
                    )
                    keyboard.inline_keyboard.append([button])

                await message.answer(response_text, reply_markup=keyboard)
            else:
                await message.answer("ü§∑‚Äç‚ôÇÔ∏è–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞.")
        else:
            await message.answer("‚ùå–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await bus_registration(message, state)
    else:
        await message.answer("‚ùå–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await user_password_waiting(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
@menu_router.callback_query(lambda callback_query: callback_query.data.startswith('apply_for_request_'))
async def apply_for_request(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏ ID –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data
    data = callback.data.split("_")
    request_idx = int(data[3])  # –ò–Ω–¥–µ–∫—Å –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3)
    request_id = int(data[4])  # ID —Å–∞–º–æ–≥–æ –∑–∞–∫–∞–∑–∞

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É –æ—Ç–∫–ª–∏–∫–∞
    await callback.message.answer(f"üí∞–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{request_idx}. –°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞?")
    await state.update_data(request_id=request_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(ResponseAnswer.waiting_for_price)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã
@menu_router.message(ResponseAnswer.waiting_for_price)
async def handle_price(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É
    price = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ)
    if not price.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")
        return

    price = int(price)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é —Ü–µ–Ω—É –≤ —á–∏—Å–ª–æ

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    request_id = data.get("request_id")
    user = session.query(User).filter(User.tg_id == message.from_user.id).first()
    bus = session.query(Bus).filter(Bus.user_id == user.user_id).first()

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    request = session.query(Request).filter(Request.request_id == request_id).first()

    if request:
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑
        response = Response(
            user_id=user.user_id,
            bus_id=bus.bus_id,
            request_id=request_id,
            price=price
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        session.add(response)
        session.commit()

        await message.answer(f"–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{request_id} —Å —Ü–µ–Ω–æ–π {price} —Ä—É–±. –í–∞—à –æ—Ç–∫–ª–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@menu_router.message(lambda message: message.text == "üóì–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def current_session(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = session.query(User).filter(User.tg_id == message.from_user.id).first()
    if user:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å—ã
        buses = session.query(Bus).filter(Bus.tg_id == user.tg_id).all()
        if buses:
            response = "–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
            for bus in buses:
                schedules = session.query(Schedule).filter(Schedule.bus_id == bus.bus_id).all()
                if schedules:
                    response += f"üöç –ê–≤—Ç–æ–±—É—Å {bus.number} ({bus.brand})\n"
                    for schedule in schedules:
                        response += f"üìÖ –î–∞—Ç—ã: {schedule.date_range}\n"
                    response += "\n"
                else:
                    response += f"üöç –ê–≤—Ç–æ–±—É—Å {bus.number} ({bus.brand}) –ø–æ–∫–∞ –Ω–µ –∏–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n\n"
            await message.answer(response)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–±—É—Å–æ–≤.")
            await bus_registration(message, state)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        await user_password_waiting(message, state)
