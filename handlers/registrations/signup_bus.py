from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from db_handlers.create_db import session
from db_handlers.models import User, Bus
from handlers.menu.menu import menu


# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞
class SignUpBus(StatesGroup):
    number = State()
    brand = State()
    has_air_conditioning = State()
    mic_for_guide = State()
    tv_monitor = State()
    reclining_seats = State()
    category = State()
    confirmation = State()


# –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞
bus_router = Router()


# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞
async def bus_registration(message: types.Message, state: FSMContext):
    await message.answer(
        "üöå <b>–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–±—É—Å</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞:"
    )
    await state.set_state(SignUpBus.number)


# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞
@bus_router.message(SignUpBus.number)
async def handle_bus_number(message: types.Message, state: FSMContext):
    number = message.text
    await state.update_data(number=number)
    await message.answer("üöç –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–±—É—Å–∞:")
    await state.set_state(SignUpBus.brand)


# –í–≤–æ–¥ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–±—É—Å–∞
@bus_router.message(SignUpBus.brand)
async def handle_bus_brand(message: types.Message, state: FSMContext):
    brand = message.text
    await state.update_data(brand=brand)
    air_conditioner_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞‚úÖ"), KeyboardButton(text="–ù–µ—Ç‚ùå")]],
        resize_keyboard=True
    )
    await message.answer("‚ùÑÔ∏è –ï—Å—Ç—å –ª–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –≤ –∞–≤—Ç–æ–±—É—Å–µ?", reply_markup=air_conditioner_keyboard)
    await state.set_state(SignUpBus.has_air_conditioning)


# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–µ
@bus_router.message(SignUpBus.has_air_conditioning)
async def handle_air_conditioner(message: types.Message, state: FSMContext):
    has_air_conditioning = message.text.lower()
    if has_air_conditioning not in ["–¥–∞‚úÖ", "–Ω–µ—Ç‚ùå"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞‚úÖ' –∏–ª–∏ '–ù–µ—Ç‚ùå' —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(has_air_conditioning=(has_air_conditioning == "–¥–∞‚úÖ"))

    mic_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞‚úÖ"), KeyboardButton(text="–ù–µ—Ç‚ùå")]],
        resize_keyboard=True
    )
    await message.answer("üé§ –ï—Å—Ç—å –ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–∏–¥–∞?", reply_markup=mic_keyboard)
    await state.set_state(SignUpBus.mic_for_guide)


# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏–∫—Ä–æ—Ñ–æ–Ω–µ
@bus_router.message(SignUpBus.mic_for_guide)
async def handle_mic_for_guide(message: types.Message, state: FSMContext):
    mic_for_guide = message.text.lower()
    if mic_for_guide not in ["–¥–∞‚úÖ", "–Ω–µ—Ç‚ùå"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞‚úÖ' –∏–ª–∏ '–ù–µ—Ç‚ùå' —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(mic_for_guide=(mic_for_guide == "–¥–∞‚úÖ"))

    tv_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞‚úÖ"), KeyboardButton(text="–ù–µ—Ç‚ùå")]],
        resize_keyboard=True
    )
    await message.answer("üì∫ –ï—Å—Ç—å –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä/–¢–í?", reply_markup=tv_keyboard)
    await state.set_state(SignUpBus.tv_monitor)


# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–Ω–∏—Ç–æ—Ä–µ/–¢–í
@bus_router.message(SignUpBus.tv_monitor)
async def handle_tv_monitor(message: types.Message, state: FSMContext):
    tv_monitor = message.text.lower()
    if tv_monitor not in ["–¥–∞‚úÖ", "–Ω–µ—Ç‚ùå"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞‚úÖ' –∏–ª–∏ '–ù–µ—Ç‚ùå' —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(tv_monitor=(tv_monitor == "–¥–∞‚úÖ"))

    recline_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–î–∞‚úÖ"), KeyboardButton(text="–ù–µ—Ç‚ùå")]],
        resize_keyboard=True
    )
    await message.answer("üõãÔ∏è –ï—Å—Ç—å –ª–∏ –æ—Ç–∫–∏–¥–Ω—ã–µ –∫—Ä–µ—Å–ª–∞?", reply_markup=recline_keyboard)
    await state.set_state(SignUpBus.reclining_seats)


# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–∫–∏–¥–Ω—ã—Ö –∫—Ä–µ—Å–ª–∞—Ö
@bus_router.message(SignUpBus.reclining_seats)
async def handle_reclining_seats(message: types.Message, state: FSMContext):
    reclining_seats = message.text.lower()
    if reclining_seats not in ["–¥–∞‚úÖ", "–Ω–µ—Ç‚ùå"]:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ '–î–∞‚úÖ' –∏–ª–∏ '–ù–µ—Ç‚ùå' —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(reclining_seats=(reclining_seats == "–¥–∞‚úÖ"))

    category_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–∏–Ω–∏–≤–µ–Ω—ã (5-9 –º–µ—Å—Ç)")],
            [KeyboardButton(text="–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã (10-20 –º–µ—Å—Ç)")],
            [KeyboardButton(text="–ú–∞–ª—ã–µ –∞–≤—Ç–æ–±—É—Å—ã (21-30 –º–µ—Å—Ç)")],
            [KeyboardButton(text="–°—Ä–µ–¥–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (31-45 –º–µ—Å—Ç)")],
            [KeyboardButton(text="–ë–æ–ª—å—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (46-60 –º–µ—Å—Ç)")],
            [KeyboardButton(text="–û—Å–æ–±–æ –±–æ–ª—å—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (61-90 –º–µ—Å—Ç)")]
        ],
        resize_keyboard=True
    )
    await message.answer("üöê –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=category_keyboard)
    await state.set_state(SignUpBus.category)


# –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
@bus_router.message(SignUpBus.category)
async def handle_category(message: types.Message, state: FSMContext):
    type_bus = message.text
    valid_categories = [
        "–ú–∏–Ω–∏–≤–µ–Ω—ã (5-9 –º–µ—Å—Ç)", "–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å—ã (10-20 –º–µ—Å—Ç)", "–ú–∞–ª—ã–µ –∞–≤—Ç–æ–±—É—Å—ã (21-30 –º–µ—Å—Ç)",
        "–°—Ä–µ–¥–Ω–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (31-45 –º–µ—Å—Ç)", "–ë–æ–ª—å—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (46-60 –º–µ—Å—Ç)", "–û—Å–æ–±–æ –±–æ–ª—å—à–∏–µ –∞–≤—Ç–æ–±—É—Å—ã (61-90 –º–µ—Å—Ç)"
    ]
    if type_bus not in valid_categories:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        return
    await state.update_data(type_bus=type_bus)

    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    await message.answer(
        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å–∞:</b>\n\n"
        f"üî∑ –ù–æ–º–µ—Ä: {data['number']}\n"
        f"üî∑ –ú–∞—Ä–∫–∞: {data['brand']}\n"
        f"üî∑ –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: {'–î–∞‚úÖ' if data['has_air_conditioning'] else '–ù–µ—Ç‚ùå'}\n"
        f"üî∑ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–∏–¥–∞: {'–î–∞‚úÖ' if data['mic_for_guide'] else '–ù–µ—Ç‚ùå'}\n"
        f"üî∑ –ú–æ–Ω–∏—Ç–æ—Ä/–¢–í: {'–î–∞‚úÖ' if data['tv_monitor'] else '–ù–µ—Ç‚ùå'}\n"
        f"üî∑ –û—Ç–∫–∏–¥–Ω—ã–µ –∫—Ä–µ—Å–ª–∞: {'–î–∞‚úÖ' if data['reclining_seats'] else '–ù–µ—Ç‚ùå'}\n"
        f"üî∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['type_bus']}"
    )

    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_data")],
            [InlineKeyboardButton(text="‚ùå –ù–µ –≤–µ—Ä–Ω–æ", callback_data="cancel_data")]
        ]
    )
    await message.answer("üîÑ –í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ?", reply_markup=confirm_keyboard)
    await state.set_state(SignUpBus.confirmation)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bus_router.callback_query(SignUpBus.confirmation)
async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_data":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        tg_id = callback.from_user.id
        number = data["number"]
        brand = data["brand"]

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = session.query(User).filter(User.tg_id == tg_id).first()
        driver_name = user.username if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        user_id = user.user_id

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        type_bus = data["type_bus"]  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞–≤—Ç–æ–±—É—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–∏–ø)
        condition = data["has_air_conditioning"]  # –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä
        microphone_for_guide = data["mic_for_guide"]  # –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –≥–∏–¥–∞
        monitor = data["tv_monitor"]  # –ú–æ–Ω–∏—Ç–æ—Ä/–¢–í
        arm_chairs = data["reclining_seats"]  # –û—Ç–∫–∏–¥–Ω—ã–µ –∫—Ä–µ—Å–ª–∞

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≤—Ç–æ–±—É—Å–∞
        new_bus = Bus(
            tg_id=tg_id,
            user_id=user_id,
            number=number,
            brand=brand,
            driver_name=driver_name,
            type_bus=type_bus,
            condition=condition,
            microphone_for_guide=microphone_for_guide,
            monitor=monitor,
            arm_chairs=arm_chairs
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–±—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session.add(new_bus)
        session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        await menu(callback, "üöÄ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ!")
        await state.clear()
    elif callback.data == "cancel_data":
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await callback.message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await bus_registration(callback.message, state)
