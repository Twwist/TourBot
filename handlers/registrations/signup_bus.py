from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from db_handlers.create_db import session
from db_handlers.models import User, Bus
from handlers.menu.menu import menu


# FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞
class SignUpBus(StatesGroup):
    number = State()
    brand = State()
    seat_count = State()
    comfort_level = State()
    has_air_conditioning = State()
    confirmation = State()


# –†–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞
bus_router = Router()


# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–±—É—Å–∞
async def bus_registration(message: types.Message, state: FSMContext):
    await message.answer(
        "üöå <b>–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–±—É—Å</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞:"
    )
    await state.set_state(SignUpBus.number)


# –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–±—É—Å–∞
@bus_router.message(SignUpBus.number)
async def handle_bus_number(message: types.Message, state: FSMContext):
    number = message.text
    await state.update_data(number=number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–±—É—Å–∞:")
    await state.set_state(SignUpBus.brand)


# –í–≤–æ–¥ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–±—É—Å–∞
@bus_router.message(SignUpBus.brand)
async def handle_bus_brand(message: types.Message, state: FSMContext):
    brand = message.text
    await state.update_data(brand=brand)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –≤ –∞–≤—Ç–æ–±—É—Å–µ:")
    await state.set_state(SignUpBus.seat_count)


# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç
@bus_router.message(SignUpBus.seat_count)
async def handle_seats_count(message: types.Message, state: FSMContext):
    seat_count = message.text
    if not seat_count.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(seat_count=int(seat_count))
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∞–≤—Ç–æ–±—É—Å–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:\n"
        "1 - –æ—Ç–≤—Ä–∞—Ç–∏—Ç–µ–ª—å–Ω–æ, 2 - –ø–ª–æ—Ö–æ, 3 - –Ω–æ—Ä–º–∞–ª—å–Ω–æ, 4 - —Ö–æ—Ä–æ—à–æ, 5 - –æ—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ."
    )
    await state.set_state(SignUpBus.comfort_level)


# –í–≤–æ–¥ —É—Ä–æ–≤–Ω—è –∫–æ–º—Ñ–æ—Ä—Ç–∞
@bus_router.message(SignUpBus.comfort_level)
async def handle_comfort_level(message: types.Message, state: FSMContext):
    comfort_level = message.text
    if not comfort_level.isdigit() or not (1 <= int(comfort_level) <= 5):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return
    await state.update_data(comfort_level=int(comfort_level))

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞
    air_conditioner_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")]
        ],
        resize_keyboard=True
    )
    await message.answer("–ï—Å—Ç—å –ª–∏ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä –≤ –∞–≤—Ç–æ–±—É—Å–µ?", reply_markup=air_conditioner_keyboard)
    await state.set_state(SignUpBus.has_air_conditioning)


# –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–µ
@bus_router.message(SignUpBus.has_air_conditioning)
async def handle_air_conditioner(message: types.Message, state: FSMContext):
    has_air_conditioning = message.text.lower()
    if has_air_conditioning not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç' —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(has_air_conditioning=(has_air_conditioning == "–¥–∞"))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    await message.answer(
        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–±—É—Å–∞:</b>\n\n"
        f"üîπ –ù–æ–º–µ—Ä: {data['number']}\n"
        f"üîπ –ú–∞—Ä–∫–∞: {data['brand']}\n"
        f"üîπ –ú–µ—Å—Ç: {data['seat_count']}\n"
        f"üîπ –ö–æ–º—Ñ–æ—Ä—Ç: {data['comfort_level']}\n"
        f"üîπ –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä: {'–î–∞' if data['has_air_conditioning'] else '–ù–µ—Ç'}"
    )

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_data")],
            [InlineKeyboardButton(text="‚ùå –ù–µ –≤–µ—Ä–Ω–æ", callback_data="cancel_data")]
        ]
    )
    await message.answer("–í—Å—ë –≤–µ—Ä–Ω–æ? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ?", reply_markup=confirm_keyboard)
    await state.set_state(SignUpBus.confirmation)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@bus_router.callback_query(SignUpBus.confirmation)
async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "confirm_data":
        data = await state.get_data()
        tg_id = callback.from_user.id
        number = data["number"]
        brand = data['brand']

        user = session.query(User).filter(
            User.tg_id == tg_id).first()
        driver_name = user.username

        seat_count = data['seat_count']
        comfort_level = data['comfort_level']
        has_air_conditioning = data['has_air_conditioning']

        new_bus = Bus(
            number=number,
            brand=brand,
            driver_name=driver_name,
            seat_count=seat_count,
            comfort_level=comfort_level,
            has_air_conditioning=has_air_conditioning
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–±—É—Å –≤ —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        session.add(new_bus)
        session.commit()
        await menu(callback, "üöÄ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ!")
        await state.clear()
    elif callback.data == "cancel_data":
        await callback.message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        await bus_registration(callback.message, state)
